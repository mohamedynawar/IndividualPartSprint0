Git <https://git-scm.com/> --everything-is-local

  * About <https://git-scm.com/about>
      o Branching and Merging <https://git-scm.com/about>
      o Small and Fast <https://git-scm.com/about/small-and-fast>
      o Distributed <https://git-scm.com/about/distributed>
      o Data Assurance <https://git-scm.com/about/info-assurance>
      o Staging Area <https://git-scm.com/about/staging-area>
      o Free and Open Source
        <https://git-scm.com/about/free-and-open-source>
      o Trademark <https://git-scm.com/about/trademark>
  * Documentation <https://git-scm.com/doc>
      o Reference <https://git-scm.com/docs>
      o Book <https://git-scm.com/book>
      o Videos <https://git-scm.com/videos>
      o External Links <https://git-scm.com/doc/ext>
  * Downloads <https://git-scm.com/downloads>
      o GUI Clients <https://git-scm.com/downloads/guis>
      o Logos <https://git-scm.com/downloads/logos>
  * Community <https://git-scm.com/community>

------------------------------------------------------------------------

This book is available in English <https://git-scm.com/book/en>.

Full translation available in Deutsch <https://git-scm.com/book/de>, 简
体中文 <https://git-scm.com/book/zh>, 繁體中文
<https://git-scm.com/book/zh-tw>, Français
<https://git-scm.com/book/fr/v2>, 日本語 <https://git-scm.com/book/ja>,
Nederlands <https://git-scm.com/book/nl>, Русский
<https://git-scm.com/book/ru>, 한국어 <https://git-scm.com/book/ko>,
Português (Brasil) <https://git-scm.com/book/pt-br> and Čeština
<https://git-scm.com/book/cs>.

Partial translations available in Arabic <https://git-scm.com/book/ar>,
Español <https://git-scm.com/book/es>, Indonesian
<https://git-scm.com/book/id>, Italiano <https://git-scm.com/book/it>,
Suomi <https://git-scm.com/book/fi>, Македонски
<https://git-scm.com/book/mk>, Ελληνικά <https://git-scm.com/book/gr>,
Polski <https://git-scm.com/book/pl> and Türkçe
<https://git-scm.com/book/tr>.

Translations started for Azərbaycan dili <https://git-scm.com/book/az>,
Беларуская <https://git-scm.com/book/be>, Català
<https://git-scm.com/book/ca>, Esperanto <https://git-scm.com/book/eo>,
Español (Nicaragua) <https://git-scm.com/book/es-ni>, فارسی
<https://git-scm.com/book/fa>, हिन्दी <https://git-scm.com/book/hi>,
Magyar <https://git-scm.com/book/hu>, Norwegian Bokmål
<https://git-scm.com/book/no-nb>, Polski <https://git-scm.com/book/pl>,
Română <https://git-scm.com/book/ro>, Српски
<https://git-scm.com/book/sr>, ภาษาไทย <https://git-scm.com/book/th>,
Tagalog <https://git-scm.com/book/tl>, Tiếng Việt
<https://git-scm.com/book/vi>, Українська <https://git-scm.com/book/uk>
and Ўзбекча <https://git-scm.com/book/uz/v2>.

------------------------------------------------------------------------

The source of this book is hosted on GitHub.
<https://github.com/progit/progit2>
Patches, suggestions and comments are welcome.

Chapters ▾ <#>

 1.


        1. Getting Started
        <https://git-scm.com/book/en/v2/Getting-Started-About-Version-Control>

     1. 1.1 About Version Control
        <https://git-scm.com/book/en/v2/Getting-Started-About-Version-Control>

     2. 1.2 A Short History of Git
        <https://git-scm.com/book/en/v2/Getting-Started-A-Short-History-of-Git>

     3. 1.3 Git Basics
        <https://git-scm.com/book/en/v2/Getting-Started-Git-Basics>
     4. 1.4 The Command Line
        <https://git-scm.com/book/en/v2/Getting-Started-The-Command-Line>
     5. 1.5 Installing Git
        <https://git-scm.com/book/en/v2/Getting-Started-Installing-Git>
     6. 1.6 First-Time Git Setup
        <https://git-scm.com/book/en/v2/Getting-Started-First-Time-Git-Setup>

     7. 1.7 Getting Help
        <https://git-scm.com/book/en/v2/Getting-Started-Getting-Help>
     8. 1.8 Summary
        <https://git-scm.com/book/en/v2/Getting-Started-Summary>
 2.


        2. Git Basics
        <https://git-scm.com/book/en/v2/Git-Basics-Getting-a-Git-Repository>

     1. 2.1 Getting a Git Repository
        <https://git-scm.com/book/en/v2/Git-Basics-Getting-a-Git-Repository>

     2. 2.2 Recording Changes to the Repository
        <https://git-scm.com/book/en/v2/Git-Basics-Recording-Changes-to-the-Repository>

     3. 2.3 Viewing the Commit History
        <https://git-scm.com/book/en/v2/Git-Basics-Viewing-the-Commit-History>

     4. 2.4 Undoing Things
        <https://git-scm.com/book/en/v2/Git-Basics-Undoing-Things>
     5. 2.5 Working with Remotes
        <https://git-scm.com/book/en/v2/Git-Basics-Working-with-Remotes>
     6. 2.6 Tagging <https://git-scm.com/book/en/v2/Git-Basics-Tagging>
     7. 2.7 Git Aliases
        <https://git-scm.com/book/en/v2/Git-Basics-Git-Aliases>
     8. 2.8 Summary <https://git-scm.com/book/en/v2/Git-Basics-Summary>
 3.


        3. Git Branching
        <https://git-scm.com/book/en/v2/Git-Branching-Branches-in-a-Nutshell>

     1. 3.1 Branches in a Nutshell
        <https://git-scm.com/book/en/v2/Git-Branching-Branches-in-a-Nutshell>

     2. 3.2 Basic Branching and Merging
        <https://git-scm.com/book/en/v2/Git-Branching-Basic-Branching-and-Merging>

     3. 3.3 Branch Management
        <https://git-scm.com/book/en/v2/Git-Branching-Branch-Management>
     4. 3.4 Branching Workflows
        <https://git-scm.com/book/en/v2/Git-Branching-Branching-Workflows>
     5. 3.5 Remote Branches
        <https://git-scm.com/book/en/v2/Git-Branching-Remote-Branches>
     6. 3.6 Rebasing
        <https://git-scm.com/book/en/v2/Git-Branching-Rebasing>
     7. 3.7 Summary <https://git-scm.com/book/en/v2/Git-Branching-Summary>
 4.


        4. Git on the Server
        <https://git-scm.com/book/en/v2/Git-on-the-Server-The-Protocols>

     1. 4.1 The Protocols
        <https://git-scm.com/book/en/v2/Git-on-the-Server-The-Protocols>
     2. 4.2 Getting Git on a Server
        <https://git-scm.com/book/en/v2/Git-on-the-Server-Getting-Git-on-a-Server>

     3. 4.3 Generating Your SSH Public Key
        <https://git-scm.com/book/en/v2/Git-on-the-Server-Generating-Your-SSH-Public-Key>

     4. 4.4 Setting Up the Server
        <https://git-scm.com/book/en/v2/Git-on-the-Server-Setting-Up-the-Server>

     5. 4.5 Git Daemon
        <https://git-scm.com/book/en/v2/Git-on-the-Server-Git-Daemon>
     6. 4.6 Smart HTTP
        <https://git-scm.com/book/en/v2/Git-on-the-Server-Smart-HTTP>
     7. 4.7 GitWeb
        <https://git-scm.com/book/en/v2/Git-on-the-Server-GitWeb>
     8. 4.8 GitLab
        <https://git-scm.com/book/en/v2/Git-on-the-Server-GitLab>
     9. 4.9 Third Party Hosted Options
        <https://git-scm.com/book/en/v2/Git-on-the-Server-Third-Party-Hosted-Options>

    10. 4.10 Summary
        <https://git-scm.com/book/en/v2/Git-on-the-Server-Summary>
 5.


        5. Distributed Git
        <https://git-scm.com/book/en/v2/Distributed-Git-Distributed-Workflows>

     1. 5.1 Distributed Workflows
        <https://git-scm.com/book/en/v2/Distributed-Git-Distributed-Workflows>

     2. 5.2 Contributing to a Project
        <https://git-scm.com/book/en/v2/Distributed-Git-Contributing-to-a-Project>

     3. 5.3 Maintaining a Project
        <https://git-scm.com/book/en/v2/Distributed-Git-Maintaining-a-Project>

     4. 5.4 Summary
        <https://git-scm.com/book/en/v2/Distributed-Git-Summary>

 1.


        6. GitHub
        <https://git-scm.com/book/en/v2/GitHub-Account-Setup-and-Configuration>

     1. 6.1 Account Setup and Configuration
        <https://git-scm.com/book/en/v2/GitHub-Account-Setup-and-Configuration>

     2. 6.2 Contributing to a Project
        <https://git-scm.com/book/en/v2/GitHub-Contributing-to-a-Project>
     3. 6.3 Maintaining a Project
        <https://git-scm.com/book/en/v2/GitHub-Maintaining-a-Project>
     4. 6.4 Managing an organization
        <https://git-scm.com/book/en/v2/GitHub-Managing-an-organization>
     5. 6.5 Scripting GitHub
        <https://git-scm.com/book/en/v2/GitHub-Scripting-GitHub>
     6. 6.6 Summary <https://git-scm.com/book/en/v2/GitHub-Summary>
 2.


        7. Git Tools
        <https://git-scm.com/book/en/v2/Git-Tools-Revision-Selection>

     1. 7.1 Revision Selection
        <https://git-scm.com/book/en/v2/Git-Tools-Revision-Selection>
     2. 7.2 Interactive Staging
        <https://git-scm.com/book/en/v2/Git-Tools-Interactive-Staging>
     3. 7.3 Stashing and Cleaning
        <https://git-scm.com/book/en/v2/Git-Tools-Stashing-and-Cleaning>
     4. 7.4 Signing Your Work
        <https://git-scm.com/book/en/v2/Git-Tools-Signing-Your-Work>
     5. 7.5 Searching <https://git-scm.com/book/en/v2/Git-Tools-Searching>
     6. 7.6 Rewriting History
        <https://git-scm.com/book/en/v2/Git-Tools-Rewriting-History>
     7. 7.7 Reset Demystified
        <https://git-scm.com/book/en/v2/Git-Tools-Reset-Demystified>
     8. 7.8 Advanced Merging
        <https://git-scm.com/book/en/v2/Git-Tools-Advanced-Merging>
     9. 7.9 Rerere <https://git-scm.com/book/en/v2/Git-Tools-Rerere>
    10. 7.10 Debugging with Git
        <https://git-scm.com/book/en/v2/Git-Tools-Debugging-with-Git>
    11. 7.11 Submodules
        <https://git-scm.com/book/en/v2/Git-Tools-Submodules>
    12. 7.12 Bundling <https://git-scm.com/book/en/v2/Git-Tools-Bundling>
    13. 7.13 Replace <https://git-scm.com/book/en/v2/Git-Tools-Replace>
    14. 7.14 Credential Storage
        <https://git-scm.com/book/en/v2/Git-Tools-Credential-Storage>
    15. 7.15 Summary <https://git-scm.com/book/en/v2/Git-Tools-Summary>
 3.


        8. Customizing Git
        <https://git-scm.com/book/en/v2/Customizing-Git-Git-Configuration>

     1. 8.1 Git Configuration
        <https://git-scm.com/book/en/v2/Customizing-Git-Git-Configuration>
     2. 8.2 Git Attributes
        <https://git-scm.com/book/en/v2/Customizing-Git-Git-Attributes>
     3. 8.3 Git Hooks
        <https://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks>
     4. 8.4 An Example Git-Enforced Policy
        <https://git-scm.com/book/en/v2/Customizing-Git-An-Example-Git-Enforced-Policy>

     5. 8.5 Summary
        <https://git-scm.com/book/en/v2/Customizing-Git-Summary>
 4.


        9. Git and Other Systems
        <https://git-scm.com/book/en/v2/Git-and-Other-Systems-Git-as-a-Client>

     1. 9.1 Git as a Client
        <https://git-scm.com/book/en/v2/Git-and-Other-Systems-Git-as-a-Client>

     2. 9.2 Migrating to Git
        <https://git-scm.com/book/en/v2/Git-and-Other-Systems-Migrating-to-Git>

     3. 9.3 Summary
        <https://git-scm.com/book/en/v2/Git-and-Other-Systems-Summary>
 5.


        10. Git Internals
        <https://git-scm.com/book/en/v2/Git-Internals-Plumbing-and-Porcelain>

     1. 10.1 Plumbing and Porcelain
        <https://git-scm.com/book/en/v2/Git-Internals-Plumbing-and-Porcelain>

     2. 10.2 Git Objects
        <https://git-scm.com/book/en/v2/Git-Internals-Git-Objects>
     3. 10.3 Git References
        <https://git-scm.com/book/en/v2/Git-Internals-Git-References>
     4. 10.4 Packfiles
        <https://git-scm.com/book/en/v2/Git-Internals-Packfiles>
     5. 10.5 The Refspec
        <https://git-scm.com/book/en/v2/Git-Internals-The-Refspec>
     6. 10.6 Transfer Protocols
        <https://git-scm.com/book/en/v2/Git-Internals-Transfer-Protocols>
     7. 10.7 Maintenance and Data Recovery
        <https://git-scm.com/book/en/v2/Git-Internals-Maintenance-and-Data-Recovery>

     8. 10.8 Environment Variables
        <https://git-scm.com/book/en/v2/Git-Internals-Environment-Variables>

     9. 10.9 Summary <https://git-scm.com/book/en/v2/Git-Internals-Summary>
    10. 10.10 Moving Files
        <https://git-scm.com/book/en/v2/Git-Internals-Moving-Files>

 1.


        A1. Appendix A: Git in Other Environments
        <https://git-scm.com/book/en/v2/Appendix-A%3A-Git-in-Other-Environments-Graphical-Interfaces>

     1. A1.1 Graphical Interfaces
        <https://git-scm.com/book/en/v2/Appendix-A%3A-Git-in-Other-Environments-Graphical-Interfaces>

     2. A1.2 Git in Visual Studio
        <https://git-scm.com/book/en/v2/Appendix-A%3A-Git-in-Other-Environments-Git-in-Visual-Studio>

     3. A1.3 Git in Eclipse
        <https://git-scm.com/book/en/v2/Appendix-A%3A-Git-in-Other-Environments-Git-in-Eclipse>

     4. A1.4 Git in Bash
        <https://git-scm.com/book/en/v2/Appendix-A%3A-Git-in-Other-Environments-Git-in-Bash>

     5. A1.5 Git in Zsh
        <https://git-scm.com/book/en/v2/Appendix-A%3A-Git-in-Other-Environments-Git-in-Zsh>

     6. A1.6 Git in Powershell
        <https://git-scm.com/book/en/v2/Appendix-A%3A-Git-in-Other-Environments-Git-in-Powershell>

     7. A1.7 Summary
        <https://git-scm.com/book/en/v2/Appendix-A%3A-Git-in-Other-Environments-Summary>

 2.


        A2. Appendix B: Embedding Git in your Applications
        <https://git-scm.com/book/en/v2/Appendix-B%3A-Embedding-Git-in-your-Applications-Command-line-Git>

     1. A2.1 Command-line Git
        <https://git-scm.com/book/en/v2/Appendix-B%3A-Embedding-Git-in-your-Applications-Command-line-Git>

     2. A2.2 Libgit2
        <https://git-scm.com/book/en/v2/Appendix-B%3A-Embedding-Git-in-your-Applications-Libgit2>

     3. A2.3 JGit
        <https://git-scm.com/book/en/v2/Appendix-B%3A-Embedding-Git-in-your-Applications-JGit>

 3.


        A3. Appendix C: Git Commands
        <https://git-scm.com/book/en/v2/Appendix-C%3A-Git-Commands-Setup-and-Config>

     1. A3.1 Setup and Config
        <https://git-scm.com/book/en/v2/Appendix-C%3A-Git-Commands-Setup-and-Config>

     2. A3.2 Getting and Creating Projects
        <https://git-scm.com/book/en/v2/Appendix-C%3A-Git-Commands-Getting-and-Creating-Projects>

     3. A3.3 Basic Snapshotting
        <https://git-scm.com/book/en/v2/Appendix-C%3A-Git-Commands-Basic-Snapshotting>

     4. A3.4 Branching and Merging
        <https://git-scm.com/book/en/v2/Appendix-C%3A-Git-Commands-Branching-and-Merging>

     5. A3.5 Sharing and Updating Projects
        <https://git-scm.com/book/en/v2/Appendix-C%3A-Git-Commands-Sharing-and-Updating-Projects>

     6. A3.6 Inspection and Comparison
        <https://git-scm.com/book/en/v2/Appendix-C%3A-Git-Commands-Inspection-and-Comparison>

     7. A3.7 Debugging
        <https://git-scm.com/book/en/v2/Appendix-C%3A-Git-Commands-Debugging>

     8. A3.8 Patching
        <https://git-scm.com/book/en/v2/Appendix-C%3A-Git-Commands-Patching>

     9. A3.9 Email
        <https://git-scm.com/book/en/v2/Appendix-C%3A-Git-Commands-Email>
    10. A3.10 External Systems
        <https://git-scm.com/book/en/v2/Appendix-C%3A-Git-Commands-External-Systems>

    11. A3.11 Administration
        <https://git-scm.com/book/en/v2/Appendix-C%3A-Git-Commands-Administration>

    12. A3.12 Plumbing Commands
        <https://git-scm.com/book/en/v2/Appendix-C%3A-Git-Commands-Plumbing-Commands>


2nd Edition


  5.1 Distributed Git - Distributed Workflows

Now that you have a remote Git repository set up as a focal point for
all the developers to share their code, and you’re familiar with basic
Git commands in a local workflow, you’ll look at how to utilize some of
the distributed workflows that Git affords you.

In this chapter, you’ll see how to work with Git in a distributed
environment as a contributor and an integrator. That is, you’ll learn
how to contribute code successfully to a project and make it as easy on
you and the project maintainer as possible, and also how to maintain a
project successfully with a number of developers contributing.


    Distributed Workflows

Unlike Centralized Version Control Systems (CVCSs), the distributed
nature of Git allows you to be far more flexible in how developers
collaborate on projects. In centralized systems, every developer is a
node working more or less equally on a central hub. In Git, however,
every developer is potentially both a node and a hub — that is, every
developer can both contribute code to other repositories and maintain a
public repository on which others can base their work and which they can
contribute to. This opens a vast range of workflow possibilities for
your project and/or your team, so we’ll cover a few common paradigms
that take advantage of this flexibility. We’ll go over the strengths and
possible weaknesses of each design; you can choose a single one to use,
or you can mix and match features from each.


      Centralized Workflow

In centralized systems, there is generally a single collaboration model 
— the centralized workflow. One central hub, or /repository/, can accept
code, and everyone synchronizes their work to it. A number of developers
are nodes — consumers of that hub — and synchronize to that one place.

Centralized workflow.
Figure 54. Centralized workflow.

This means that if two developers clone from the hub and both make
changes, the first developer to push their changes back up can do so
with no problems. The second developer must merge in the first one’s
work before pushing changes up, so as not to overwrite the first
developer’s changes. This concept is as true in Git as it is in
Subversion (or any CVCS), and this model works perfectly well in Git.

If you are already comfortable with a centralized workflow in your
company or team, you can easily continue using that workflow with Git.
Simply set up a single repository, and give everyone on your team push
access; Git won’t let users overwrite each other. Say John and Jessica
both start working at the same time. John finishes his change and pushes
it to the server. Then Jessica tries to push her changes, but the server
rejects them. She is told that she’s trying to push non-fast-forward
changes and that she won’t be able to do so until she fetches and
merges. This workflow is attractive to a lot of people because it’s a
paradigm that many are familiar and comfortable with.

This is also not limited to small teams. With Git’s branching model,
it’s possible for hundreds of developers to successfully work on a
single project through dozens of branches simultaneously.


      Integration-Manager Workflow

Because Git allows you to have multiple remote repositories, it’s
possible to have a workflow where each developer has write access to
their own public repository and read access to everyone else’s. This
scenario often includes a canonical repository that represents the
“official” project. To contribute to that project, you create your own
public clone of the project and push your changes to it. Then, you can
send a request to the maintainer of the main project to pull in your
changes. The maintainer can then add your repository as a remote, test
your changes locally, merge them into their branch, and push back to
their repository. The process works as follows (see Integration-manager
workflow. <https://git-scm.com/book/en/v2/ch00/wfdiag_b>):

 1.

    The project maintainer pushes to their public repository.

 2.

    A contributor clones that repository and makes changes.

 3.

    The contributor pushes to their own public copy.

 4.

    The contributor sends the maintainer an email asking them to pull
    changes.

 5.

    The maintainer adds the contributor’s repository as a remote and
    merges locally.

 6.

    The maintainer pushes merged changes to the main repository.

Integration-manager workflow.
Figure 55. Integration-manager workflow.

This is a very common workflow with hub-based tools like GitHub or
GitLab, where it’s easy to fork a project and push your changes into
your fork for everyone to see. One of the main advantages of this
approach is that you can continue to work, and the maintainer of the
main repository can pull in your changes at any time. Contributors don’t
have to wait for the project to incorporate their changes — each party
can work at their own pace.


      Dictator and Lieutenants Workflow

This is a variant of a multiple-repository workflow. It’s generally used
by huge projects with hundreds of collaborators; one famous example is
the Linux kernel. Various integration managers are in charge of certain
parts of the repository; they’re called /lieutenants/. All the
lieutenants have one integration manager known as the benevolent
dictator. The benevolent dictator pushes from his directory to a
reference repository from which all the collaborators need to pull. The
process works like this (see Benevolent dictator workflow.
<https://git-scm.com/book/en/v2/ch00/wfdiag_c>):

 1.

    Regular developers work on their topic branch and rebase their work
    on top of |master|. The |master| branch is that of the reference
    directory to which the dictator pushes.

 2.

    Lieutenants merge the developers' topic branches into their |master|
    branch.

 3.

    The dictator merges the lieutenants' |master| branches into the
    dictator’s |master| branch.

 4.

    Finally, the dictator pushes that |master| branch to the reference
    repository so the other developers can rebase on it.

Benevolent dictator workflow.
Figure 56. Benevolent dictator workflow.

This kind of workflow isn’t common, but can be useful in very big
projects, or in highly hierarchical environments. It allows the project
leader (the dictator) to delegate much of the work and collect large
subsets of code at multiple points before integrating them.


      Workflows Summary

These are some commonly used workflows that are possible with a
distributed system like Git, but you can see that many variations are
possible to suit your particular real-world workflow. Now that you can
(hopefully) determine which workflow combination may work for you, we’ll
cover some more specific examples of how to accomplish the main roles
that make up the different flows. In the next section, you’ll learn
about a few common patterns for contributing to a project.

prev <https://git-scm.com/book/en/v2/Git-on-the-Server-Summary> | next
<https://git-scm.com/book/en/v2/Distributed-Git-Contributing-to-a-Project>
This open sourced
<https://github.com/git/git-scm.com/blob/master/README.md#license> site
is hosted on GitHub. <https://github.com/git/git-scm.com>
Patches, suggestions and comments are welcome.
Git is a member of Software Freedom Conservancy <https://git-scm.com/sfc>

